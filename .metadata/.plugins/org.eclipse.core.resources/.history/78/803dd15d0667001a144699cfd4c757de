package client;

import java.net.*;
import java.io.*;
import java.text.SimpleDateFormat;
import java.util.Date;

class ClientSomthing {
    
    private Socket socket;
    private BufferedReader in; // поток чтения из сокета
    private BufferedWriter out; // поток записи в сокет
    private BufferedReader input; // поток чтения с консоли
    private String addr; // ip адрес клиента
    private int port; // порт соединения
    private String logPath = "src/client/MessageLog.txt"; //путь к файлу записи сообщений
    
    public ClientSomthing(String addr, int port) { //принимаем адрес и номер порта
    	
        this.addr = addr;
        this.port = port;
        
        try {
            this.socket = new Socket(addr, port);
            this.sendToMessageLog(logPath, "Connection established!");
        } catch (IOException e) {
            System.err.println("Socket failed!");
        }
        
        try {
            input = new BufferedReader(new InputStreamReader(System.in)); //чтение из консоли
            in = new BufferedReader(new InputStreamReader(socket.getInputStream())); //чтение из сокета
            out = new BufferedWriter(new OutputStreamWriter(socket.getOutputStream())); //запись в сокет
            
            new ReadMsg().start(); // нить читающая сообщения из сокета в бесконечном цикле
            new WriteMsg().start(); // нить пишущая сообщения в сокет приходящие с консоли в бесконечном цикле
            
        } catch (IOException e) {
            ClientSomthing.this.downService(); //сокет должен быть закрыт при любой ошибке
        }
    }
    
    private void sendToMessageLog(String logPath, String message) {
    	  
    	File f = new File(logPath);
        if (f.exists()) {
            try {
                BufferedWriter out = new BufferedWriter(new FileWriter(f.getAbsolutePath(), true));
                out.write(message);
                out.newLine();
                out.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }

    private void downService() { //закрытие сокета
        try {
            if (!socket.isClosed()) {
                socket.close();
                in.close();
                out.close();
            }
        } catch (IOException ignored) {}
    }    
    
    private class ReadMsg extends Thread { // нить чтения сообщений с сервера
    	
        @Override
        public void run() {
            
            String str;
            try {
                while (true) {
                    str = in.readLine(); // ждем сообщения с сервера
                    //if (str.equals("stop")) {
                     //   ClientSomthing.this.downService(); 
                     //   break; // выходим из цикла если пришло "stop"
                    //}
                    System.out.println(str); // пишем сообщение с сервера на консоль
                }
            } catch (IOException e) {
                ClientSomthing.this.downService();
            }
        }
    }
        
    public class WriteMsg extends Thread { // нить, отправляющая сообщения приходящие с консоли на сервер
        
        @Override
        public void run() {
        	
            while (true) {
                String str;
                try {                    
                    str = input.readLine(); // сообщения с консоли
                    if (str.equals("stop")) {
                        out.write("stop" + "\n");
                        ClientSomthing.this.downService(); 
                        break; // выходим из цикла если пришло "stop"
                    } else {
                        out.write(str + "\n"); // отправляем на сервер
                    }
                    out.flush(); // чистим
                } catch (IOException e) {
                    ClientSomthing.this.downService();                     
                }                
            }
        }
    }
}

public class Client {
    
    public static String ipAddr = "localhost";
    public static int port = 8090;
    
    public static void main(String[] args) {
        new ClientSomthing(ipAddr, port);
    }
}